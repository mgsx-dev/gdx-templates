buildscript {
    
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }

	apply from: '../templates/gdx-assets-only/gradle/tiled.gradle'
	apply from: '../templates/gdx-assets-only/gradle/hiero.gradle'
	apply from: '../templates/gdx-assets-only/gradle/atlas.gradle'
	apply from: '../templates/gdx-assets-only/gradle/raw.gradle'
	apply from: '../templates/gdx-assets-only/gradle/gimp.gradle'
	apply from: '../templates/gdx-assets-only/gradle/inkscape.gradle'
	apply from: '../templates/gdx-assets-only/gradle/blender.gradle'
}

version = '0.0.1-SNAPSHOT'
ext {
    appName = "gdx-sketch-example"
    gdxVersion = '1.9.7'
    mainClassName = "net.mgsx.sketch.example.gdx-sketch-example"
    assetsDir = new File("assets");
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
}




tiledMapPacker("assets-src/maps", "$projectDir/assets/maps")

def assetsTasks = []

def assetsPrepareTasks = []

assetsPrepareTasks << gdxHieroExport("assets-src/skins/hud-skin/default.hiero", "$buildDir/skins/hud-skin/unpacked")

assetsPrepareTasks << gdxRawCopy("assets-src/skins/hud-skin", "$buildDir/skins/hud-skin/unpacked")

assetsPrepareTasks << gimpExportLayers("assets-src/skins/hud-skin/bt.xcf", "$buildDir/skins/hud-skin/unpacked")

assetsPrepareTasks << inkscapeExport("assets-src/skins/hud-skin/panel.9.svg", "$buildDir/skins/hud-skin/unpacked")

def packTask = gdxAtlasPack("$buildDir/skins/hud-skin/unpacked", "assets/skins/hud-skin")

packTask.dependsOn += assetsPrepareTasks

assetsTasks << packTask

assetsTasks << blenderRenderFrame("assets-src/bg.blend", 1, "$projectDir/assets/bg.png")

task generateAssets(dependsOn: assetsTasks, group: "gdx"){}

apply plugin: "eclipse"

eclipse {
    project {
        name = appName
    }
}


apply plugin: "idea"
apply plugin: "java"


dependencies {
    compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
}

sourceCompatibility = 1.6
sourceSets.main.java.srcDirs = [ "src/" ]

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

